#include<stdio.h>
#include<stdlib.h>

struct process {
    int processID;
    int arrivalTime;
    int burstTime;
    int priority;
};

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    for(int i=0; i<n; i++) {
        printf("Enter details of process %d\n", i+1);
        printf("Process ID: ");
        scanf("%d", &p[i].processID);
        printf("Arrival Time: ");
        scanf("%d", &p[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &p[i].burstTime);
        printf("Priority: ");
        scanf("%d", &p[i].priority);
    }
    int time=0;
    while(1) {
        int min=9999, loc=-1;
        for(int i=0; i<n; i++) {
            if(p[i].arrivalTime<=time && p[i].burstTime>0 && p[i].priority<min) {
                min=p[i].priority;
                loc=i;
            }
        }
        if(loc==-1) break;
        time+=p[loc].burstTime;
        p[loc].burstTime=0;
    }
    printf("Process ID\tArrival Time\tBurst Time\tPriority\tWaiting Time\n");
    int totalWaitingTime=0;
    for(int i=0; i<n; i++) {
        int waitingTime=time-p[i].arrivalTime-p[i].burstTime;
        totalWaitingTime+=waitingTime;
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].processID, p[i].arrivalTime, p[i].burstTime, p[i].priority, waitingTime);
    }
    printf("Average Waiting Time: %f\n", (float)totalWaitingTime/n);
    return 0;
}
