#include <stdio.h>
#include <stdlib.h>
struct process {
  int arrival_time;
  int burst_time;
  int waiting_time;
  int turn_around_time;
};
void sort_processes(struct process *p, int n) {
  for (int i = 0; i < n - 1; i++) {
    int min_index = i;
    for (int j = i + 1; j < n; j++) {
      if (p[j].burst_time < p[min_index].burst_time) {
        min_index = j;
      }
    }
    struct process temp = p[i];
    p[i] = p[min_index];
    p[min_index] = temp;
  }
}
int main() {
  int n;
  printf("Enter the number of processes: ");
  scanf("%d", &n);
  struct process p[n];
  for (int i = 0; i < n; i++) {
    printf("Enter arrival time and burst time for process %d: ", i + 1);
    scanf("%d%d", &p[i].arrival_time, &p[i].burst_time);
  }
  sort_processes(p, n);
  p[0].waiting_time = 0;
  for (int i = 1; i < n; i++) {
    p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time;
  }
  for (int i = 0; i < n; i++) {
    p[i].turn_around_time = p[i].waiting_time + p[i].burst_time;
  }
  printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
  for (int i = 0; i < n; i++) {
    printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, p[i].arrival_time, p[i].burst_time,
           p[i].waiting_time, p[i].turn_around_time);
  }
  return 0;
}
